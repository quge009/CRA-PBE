add.constraint(lpmod2,c(1,1,2,3,a),"<=",4+a)
add.constraint(lpmod2,c(3,2,2,3,a),"<=",10+a)
lpmod2
solve(lpmod2)
get.objective(lpmod2)
get.variables(lpmod2) #see 44 to checl
a<-3.7
lpmod2<-make.lp(nrow=0,ncol=5)
lp.control(lpmod2, sense="max")
set.objfn(lpmod2,c(3,2,3,3,4))
add.constraint(lpmod2,c(4,1,1,1,a),"<=",3+a)
add.constraint(lpmod2,c(1,1,2,3,a),"<=",4+a)
add.constraint(lpmod2,c(3,2,2,3,a),"<=",10+a)
lpmod2
solve(lpmod2)
get.objective(lpmod2)
get.variables(lpmod2) #see 44 to checl
a<-3.3
lpmod2<-make.lp(nrow=0,ncol=5)
lp.control(lpmod2, sense="max")
set.objfn(lpmod2,c(3,2,3,3,4))
add.constraint(lpmod2,c(4,1,1,1,a),"<=",3+a)
add.constraint(lpmod2,c(1,1,2,3,a),"<=",4+a)
add.constraint(lpmod2,c(3,2,2,3,a),"<=",10+a)
lpmod2
solve(lpmod2)
get.objective(lpmod2)
get.variables(lpmod2) #see 44 to checl
a<-2
lpmod2<-make.lp(nrow=0,ncol=5)
lp.control(lpmod2, sense="max")
set.objfn(lpmod2,c(3,2,3,3,4))
add.constraint(lpmod2,c(4,1,1,1,a),"<=",3+a)
add.constraint(lpmod2,c(1,1,2,3,a),"<=",4+a)
add.constraint(lpmod2,c(3,2,2,3,a),"<=",10+a)
lpmod2
solve(lpmod2)
get.objective(lpmod2)
get.variables(lpmod2) #see 44 to checl
a<-2.1
lpmod2<-make.lp(nrow=0,ncol=5)
lp.control(lpmod2, sense="max")
set.objfn(lpmod2,c(3,2,3,3,4))
add.constraint(lpmod2,c(4,1,1,1,a),"<=",3+a)
add.constraint(lpmod2,c(1,1,2,3,a),"<=",4+a)
add.constraint(lpmod2,c(3,2,2,3,a),"<=",10+a)
lpmod2
solve(lpmod2)
get.objective(lpmod2)
get.variables(lpmod2) #see 44 to checl
a<-2.01
lpmod2<-make.lp(nrow=0,ncol=5)
lp.control(lpmod2, sense="max")
set.objfn(lpmod2,c(3,2,3,3,4))
add.constraint(lpmod2,c(4,1,1,1,a),"<=",3+a)
add.constraint(lpmod2,c(1,1,2,3,a),"<=",4+a)
add.constraint(lpmod2,c(3,2,2,3,a),"<=",10+a)
lpmod2
solve(lpmod2)
get.objective(lpmod2)
get.variables(lpmod2) #see 44 to checl
a<-1
lpmod2<-make.lp(nrow=0,ncol=5)
lp.control(lpmod2, sense="max")
set.objfn(lpmod2,c(3,2,3,3,4))
add.constraint(lpmod2,c(4,1,1,1,a),"<=",3+a)
add.constraint(lpmod2,c(1,1,2,3,a),"<=",4+a)
add.constraint(lpmod2,c(3,2,2,3,a),"<=",10+a)
lpmod2
solve(lpmod2)
get.objective(lpmod2)
get.variables(lpmod2) #see 44 to checl
get.dual.solution(lpmod2)
# 5
lpmodel<-make.lp(nrow=0,ncol=4)
lp.control(lpmodel, sense="max")
set.objfn(lpmodel,c(15,20,55,20))
# 2
library(lpSolveAPI)
# 5
lpmodel<-make.lp(nrow=0,ncol=4)
lp.control(lpmodel, sense="max")
set.objfn(lpmodel,c(15,20,55,20))
add.constraint(lpmodel,c(1,1,1,1),"=",1)
add.constraint(lpmodel,c(0.1,0.4,-0.1,-0.6),"=",0)
add.constraint(lpmodel,c(-0.1,-0.4,0.1,0.6),"=",0)
lpmodel
solve(lpmodel)
get.objective(lpmodel)
get.variables(lpmodel) #see 44 to checl
P<-matrix(c(0.6,0.4,0.1,0.9),nrow=2,byrow=TRUE)
P
eigen(t(P))
eigen(t(P))$vectors[,1]/sum(eigen(t(P))$vectors[,1])
lpmodel<-make.lp(nrow=0,ncol=3)
lp.control(lpmodel, sense="max")
set.objfn(lpmodel,c(1,-2,1))
set.objfn(lpmodel,c(1,-2,1))
add.constraint(lpmodel,c(-1,1,0),"<=",3+4.1)
add.constraint(lpmodel,c(1,1,1),"<=",4+4.1)
lpmodel
solve(lpmodel)
get.objective(lpmodel)
get.variables(lpmodel) #see 44 to checl
lpmodel<-make.lp(nrow=0,ncol=3)
lp.control(lpmodel, sense="max")
set.objfn(lpmodel,c(1,-2,1))
add.constraint(lpmodel,c(-1,1,0),"<=",2)
add.constraint(lpmodel,c(1,1,1),"<=",3)
lpmodel
solve(lpmodel)
get.objective(lpmodel)
get.variables(lpmodel) #see 44 to checl
B1<-matrix(c(0,4,8,12,16,0,2,5,8,11),nrow=2,byrow=TRUE)
B2<-matrix(c(0,8,16,0,5.5,11),norw=2,byrow=TRUE)
B2<-matrix(c(0,8,16,0,5.5,11),nrow=2,byrow=TRUE)
B3<-matrix(c(0,3,6,9,12,15,0,2,4,6,8,10),nrow=2,byrow=TRUE)
out<-array(0,dim=c(5,3,6))
B1[1,]
for(s1 in 1:5){
for (s2 in 1:3){
for (s3 in 1:6){
spent<-B1[1,s1]+B2[1,s2]+B3[1,s3]
if (spent>17){
out[s1,s2,s3]<-0
}else{
out[s1,s2,s3]<-B1[2,s1]+B2[2,s2]+B3[2,s3]
}
}
}
}
out
max(out)
sqequnce(-3,5,0.5)
seqqunce(-3,5,0.5)
seqeunce(-3,5,0.5)
sequence(-3,5,0.5)
seq(-3,5,0.5)
for(a in seq(-3,5,0.5))
a=0
lpmod2<-make.lp(nrow=0,ncol=5)
lp.control(lpmod2, sense="max")
set.objfn(lpmod2,c(3,2,3,3,4))
add.constraint(lpmod2,c(4,1,1,1,a),"<=",3+a)
add.constraint(lpmod2,c(1,1,2,3,a),"<=",4+a)
add.constraint(lpmod2,c(3,2,2,3,a),"<=",10+a)
lpmod2
solve(lpmod2)
get.objective(lpmod2)
lpmod2<-make.lp(nrow=0,ncol=5)
lp.control(lpmod2, sense="max")
set.objfn(lpmod2,c(3,2,3,3,4))
add.constraint(lpmod2,c(4,1,1,1,3),"<=",3+a)
add.constraint(lpmod2,c(1,1,2,3,3),"<=",4+a)
add.constraint(lpmod2,c(3,2,2,3,3),"<=",10+a)
lpmod2
solve(lpmod2)
get.objective(lpmod2)
get.variables(lpmod2) #see 44 to checl
get.dual.solution(lpmod2)
get.dual.solution(lpmod2)[4]
save<-data.frame(a=0,x2=0,x3=0,s3=0,obj=0)
save$a[1]
save$a[2]
save$a[3]<-3
save$a[2]<-1
save[2,]$a<-1
save
get.variables(lpmod2)
save<-data.frame(a=0,x2=0,x3=0,s3=0,obj=0)
i=1
for(a in seq(-3,5,0.5)){
lpmod2<-make.lp(nrow=0,ncol=5)
lp.control(lpmod2, sense="max")
set.objfn(lpmod2,c(3,2,3,3,4))
add.constraint(lpmod2,c(4,1,1,1,3),"<=",3+a)
add.constraint(lpmod2,c(1,1,2,3,3),"<=",4+a)
add.constraint(lpmod2,c(3,2,2,3,3),"<=",10+a)
lpmod2
solve(lpmod2)
save[i,]$a<-a
save[i,]$obj<-get.objective(lpmod2)
save[i,]$x2<-get.variables(lpmod2)[2]
save[i,]$x3<-get.variables(lpmod2)[3]
save[i,]$s3<-get.dual.solution(lpmod2)[4]
i=i+1
}
save
save<-data.frame(a=0,x2=0,x3=0,s3=0,obj=0)
i=1
for(a in seq(-3,5,0.5)){
lpmod2<-make.lp(nrow=0,ncol=5)
lp.control(lpmod2, sense="max")
set.objfn(lpmod2,c(3,2,3,3,4))
add.constraint(lpmod2,c(4,1,1,1,3),"<=",3+a)
add.constraint(lpmod2,c(1,1,2,3,3),"<=",4+a)
add.constraint(lpmod2,c(3,2,2,3,3),"<=",10+a)
lpmod2
solve(lpmod2)
save[i,]$a<-a
save[i,]$obj<-get.objective(lpmod2)
save[i,]$x2<-get.variables(lpmod2)[2]
save[i,]$x3<-get.variables(lpmod2)[3]
save[i,]$s3<-get.dual.solution(lpmod2)[4]
i=i+1
}
save
save<-data.frame(a=0,x2=0,x3=0,s3=0,obj=0)
i=1
for(a in seq(-3,5,0.5)){
lpmod2<-make.lp(nrow=0,ncol=5)
lp.control(lpmod2, sense="max")
set.objfn(lpmod2,c(3,2,3,3,4))
add.constraint(lpmod2,c(4,1,1,1,a),"<=",3+a)
add.constraint(lpmod2,c(1,1,2,3,a),"<=",4+a)
add.constraint(lpmod2,c(3,2,2,3,a),"<=",10+a)
lpmod2
solve(lpmod2)
save[i,]$a<-a
save[i,]$obj<-get.objective(lpmod2)
save[i,]$x2<-get.variables(lpmod2)[2]
save[i,]$x3<-get.variables(lpmod2)[3]
save[i,]$s3<-get.dual.solution(lpmod2)[4]
i=i+1
}
save
save<-data.frame(a=0,x2=0,x3=0,s3=0,obj=0)
i=1
for(a in seq(-3,5,0.5)){
lpmod2<-make.lp(nrow=0,ncol=5)
lp.control(lpmod2, sense="max")
set.objfn(lpmod2,c(3,2,3,3))
add.constraint(lpmod2,c(4,1,1,1),"<=",3+a)
add.constraint(lpmod2,c(1,1,2,3),"<=",4+a)
add.constraint(lpmod2,c(3,2,2,3),"<=",10+a)
lpmod2
solve(lpmod2)
save[i,]$a<-a
save[i,]$obj<-get.objective(lpmod2)
save[i,]$x2<-get.variables(lpmod2)[2]
save[i,]$x3<-get.variables(lpmod2)[3]
save[i,]$s3<-get.dual.solution(lpmod2)[4]
i=i+1
}
save<-data.frame(a=0,x2=0,x3=0,s3=0,obj=0)
i=1
for(a in seq(-3,5,0.5)){
lpmod2<-make.lp(nrow=0,ncol=4)
lp.control(lpmod2, sense="max")
set.objfn(lpmod2,c(3,2,3,4))
add.constraint(lpmod2,c(4,1,1,1),"<=",3+a)
add.constraint(lpmod2,c(1,1,2,3),"<=",4+a)
add.constraint(lpmod2,c(3,2,2,3),"<=",10+a)
lpmod2
solve(lpmod2)
save[i,]$a<-a
save[i,]$obj<-get.objective(lpmod2)
save[i,]$x2<-get.variables(lpmod2)[2]
save[i,]$x3<-get.variables(lpmod2)[3]
save[i,]$s3<-get.dual.solution(lpmod2)[4]
i=i+1
}
save
a<-4
lpmod2<-make.lp(nrow=0,ncol=4)
lp.control(lpmod2, sense="max")
set.objfn(lpmod2,c(3,2,3,4))
add.constraint(lpmod2,c(4,1,1,1),"<=",3+a)
add.constraint(lpmod2,c(1,1,2,3),"<=",4+a)
add.constraint(lpmod2,c(3,2,2,3),"<=",10+a)
lpmod2
solve(lpmod2)
get.objective
get.objective(lpmod2)
get.variables(lpmod2)
a<-4.1
lpmod2<-make.lp(nrow=0,ncol=4)
lp.control(lpmod2, sense="max")
add.constraint(lpmod2,c(4,1,1,1),"<=",3+a)
set.objfn(lpmod2,c(3,2,3,4))
add.constraint(lpmod2,c(1,1,2,3),"<=",4+a)
add.constraint(lpmod2,c(3,2,2,3),"<=",10+a)
lpmod2
solve(lpmod2)
get.variables(lpmod2)
save<-data.frame(a=0,x2=0,x3=0,s3=0,obj=0)
i=1
for(a in seq(-3,5,0.5)){
lpmod2<-make.lp(nrow=0,ncol=3)
lp.control(lpmod2, sense="max")
set.objfn(lpmod2,c(3,2,3,3))
add.constraint(lpmod2,c(4,1,1,1),"<=",3+a)
add.constraint(lpmod2,c(1,1,2,3),"<=",4+a)
add.constraint(lpmod2,c(3,2,2,3),"<=",10+a)
lpmod2
solve(lpmod2)
save[i,]$a<-a
save[i,]$obj<-get.objective(lpmod2)
save[i,]$x2<-get.variables(lpmod2)[2]
save[i,]$x3<-get.variables(lpmod2)[3]
save[i,]$s3<-get.dual.solution(lpmod2)[4]
i=i+1
}
save
save<-data.frame(a=0,x2=0,x3=0,s3=0,obj=0)
i=1
for(a in seq(-3,5,0.5)){
lpmod2<-make.lp(nrow=0,ncol=3)
lp.control(lpmod2, sense="max")
set.objfn(lpmod2,c(3,2,3,3))
add.constraint(lpmod2,c(4,1,1,1),"<=",3+a)
add.constraint(lpmod2,c(1,1,2,3),"<=",4+a)
add.constraint(lpmod2,c(3,2,2,3),"<=",10+a)
lpmod2
solve(lpmod2)
save[i,]$a<-a
save[i,]$obj<-get.objective(lpmod2)
save[i,]$x2<-get.variables(lpmod2)[2]
save[i,]$x3<-get.variables(lpmod2)[3]
save[i,]$s3<-get.dual.solution(lpmod2)[4]
i=i+1
}
save
save<-data.frame(a=0,x2=0,x3=0,s3=0,obj=0)
i=1
for(a in seq(-3,5,0.5)){
lpmod2<-make.lp(nrow=0,ncol=4)
lp.control(lpmod2, sense="max")
set.objfn(lpmod2,c(3,2,3,3))
add.constraint(lpmod2,c(4,1,1,1),"<=",3+a)
add.constraint(lpmod2,c(1,1,2,3),"<=",4+a)
add.constraint(lpmod2,c(3,2,2,3),"<=",10+a)
lpmod2
solve(lpmod2)
save[i,]$a<-a
save[i,]$obj<-get.objective(lpmod2)
save[i,]$x2<-get.variables(lpmod2)[2]
save[i,]$x3<-get.variables(lpmod2)[3]
save[i,]$s3<-get.dual.solution(lpmod2)[4]
i=i+1
}
save
save<-data.frame(a=0,x2=0,x3=0,s3=0,obj=0)
i=1
for(a in seq(-3,5,0.1)){
lpmod2<-make.lp(nrow=0,ncol=4)
lp.control(lpmod2, sense="max")
set.objfn(lpmod2,c(3,2,3,3))
add.constraint(lpmod2,c(4,1,1,1),"<=",3+a)
add.constraint(lpmod2,c(1,1,2,3),"<=",4+a)
add.constraint(lpmod2,c(3,2,2,3),"<=",10+a)
lpmod2
solve(lpmod2)
save[i,]$a<-a
save[i,]$obj<-get.objective(lpmod2)
save[i,]$x2<-get.variables(lpmod2)[2]
save[i,]$x3<-get.variables(lpmod2)[3]
save[i,]$s3<-get.dual.solution(lpmod2)[4]
i=i+1
}
save
save<-data.frame(a=0,x2=0,x3=0,s3=0,obj=0)
i=1
for(a in seq(-3,5,0.1)){
lpmod2<-make.lp(nrow=0,ncol=5)
lp.control(lpmod2, sense="max")
set.objfn(lpmod2,c(3,2,3,3,4))
add.constraint(lpmod2,c(4,1,1,1,a),"<=",3+a)
add.constraint(lpmod2,c(1,1,2,3,a),"<=",4+a)
add.constraint(lpmod2,c(3,2,2,3,a),"<=",10+a)
lpmod2
solve(lpmod2)
save[i,]$a<-a
save[i,]$obj<-get.objective(lpmod2)
save[i,]$x2<-get.variables(lpmod2)[2]
save[i,]$x3<-get.variables(lpmod2)[3]
save[i,]$s3<-get.dual.solution(lpmod2)[4]
i=i+1
}
save
a<-1
lpmod2<-make.lp(nrow=0,ncol=5)
lp.control(lpmod2, sense="max")
set.objfn(lpmod2,c(3,2,3,3,4))
add.constraint(lpmod2,c(4,1,1,1,a),"<=",3+a)
add.constraint(lpmod2,c(1,1,2,3,a),"<=",4+a)
add.constraint(lpmod2,c(3,2,2,3,a),"<=",10+a)
lpmod2
solve(lpmod2)
get.variables(lpmod2)
get.objective(lpmod2)
get.dual.solution
get.dual.solution(lpmod2)
qnorm(1.3)
?qnorm
pnorm(1.3)
pnorm(-1.3)
pnorm(1.30325,lower.tail = FALSE)
pnorm(1.30,lower.tail = FALSE)
pnorm(1.30325,lower.tail = FALSE)*exp(-0.05)
pnorm(1.30,lower.tail = FALSE)*exp(-0.05)
source('C:/Users/Vinzenz/eclipse-workspace/OutputDutchFPSB3/DutchFPSB3Prediction.R', echo=TRUE)
setwd("C:/Users/Vinzenz/eclipse-workspace/OutputDutchFPSB3/0.7 try")
rm(list = ls())
library(plotly)
options(warn=-1)
source("setup.txt")
round1Files<-list.files(path="Round1/")
round2Files<-list.files(path="Round2/")
data<-NULL
it=0
nIter=length(round1Files)-1
# 1,2 and c=0.7 so setting without theoretical predictions
for (path in round1Files){
temp<-scan(file=paste("Round1/",path,sep=""),what = character(),sep = "")
sole<-as.numeric(temp[4:(length(temp)/2)])
split<-as.numeric(temp[(length(temp)/2+4):length(temp)])
epsilon<-as.numeric(temp[2])
n1=length(sole)/2
values2<-seq(1,2,(1)/(n1-1))
dataTemp<-data.frame(values2,"sole"=sole[2*(1:n1)],"split"=split[2*(1:n1)],"it2"=it)
data<-rbind(data,dataTemp)
it=it+1
}
dataTemp$pred<-1/3*efficiency*(dataTemp$values2+4)
fig1 <- plot_ly(data, x = data$values2, y = data$sole, frame=data$it2,text='test',name = '1st Round Sole', type = 'scatter', mode = 'lines',
line = list(color = 'rgb(205, 12, 24)', width = 4,shape = "hv"))
fig1 <-fig1 %>% add_trace(data,x=~values2,y=~values2, frame~it2, name ='True value for sole', line = list(color = 'rgb(50, 120, 20)', width = 4))
fig1 <- fig1 %>% add_trace(data,x=~values2,y = ~split, frame~it2, name = '1st Round Split', line = list(color = 'rgb(22, 96, 167)', width = 4))
fig1 <- fig1 %>% add_trace(data,x=~values2,y = ~split*2, frame~it2, name = '2 x 1st Round Split', line = list(color = 'rgb(80, 20, 167)',width = 4))
fig1 <- fig1 %>% add_trace(data,x=~values2,y = ~values2*efficiency, frame~it2, name = 'True value for split', line = list(color = 'rgb(80, 20, 167)',width = 4))
fig1 <- fig1 %>% layout(title = paste("Strategies in 1st round DutchFPSB with n=3, with efficiency <br> of", efficiency, ", epsilon = ", epsilon , "<br> found after ", nIter, " iterations and", time/1000, " seconds"),
xaxis = list(title = "Cost Type for Sole source award"),
yaxis = list (title = "1st round Bids",range=c(0,2.5)))
fig1
fig1 <- fig1 %>% add_trace(data,x=~values2,y = ~split*2, frame~it2, name = '2 x 1st Round Split', line = list(color = 'rgb(22, 96, 167)',width = 4))
fig1
fig1 <- fig1 %>% layout(title = paste("Strategies in 1st round DutchFPSB with n=3, with efficiency <br> of", efficiency, ", epsilon = ", epsilon , "<br> found after ", nIter, " iterations and", time/1000, " seconds"),
xaxis = list(title = "Cost Type for Sole source award"),
yaxis = list (title = "1st round Bids",range=c(0,3)))
fig1
beliefs<-read.table(paste("Round2/",round2Files[nIter*3-2],sep=""),sep=",")
round2lost=cbind(values,round2lost)
round2won=cbind(values,round2won)
fig2<-plot_ly(round2lost,x=~values, y=~V1,name=paste("Lost Strat with belief",beliefs[1,]), type = 'scatter', mode = 'lines')
round2lost<-as.data.frame(t(read.table(paste("Round2/",round2Files[nIter*3-1],sep=""),sep=",")))
beliefs<-read.table(paste("Round2/",round2Files[nIter*3-2],sep=""),sep=",")
round2lost=cbind(values,round2lost)
round2won=cbind(values,round2won)
round2won<-as.data.frame(t(read.table(paste("Round2/",round2Files[nIter*3],sep=""),sep=",")))
round2lost<-as.data.frame(t(read.table(paste("Round2/",round2Files[nIter*3-1],sep=""),sep=",")))
values=seq(1,2,(1)/(nrow(round2lost)-1))
beliefs<-read.table(paste("Round2/",round2Files[nIter*3-2],sep=""),sep=",")
round2lost=cbind(values,round2lost)
round2won=cbind(values,round2won)
fig2<-plot_ly(round2lost,x=~values, y=~V1,name=paste("Lost Strat with belief",beliefs[1,]), type = 'scatter', mode = 'lines')
if(ncol(round2lost)>2){
for(i in 3:ncol(round2lost)){
dfi<-data.frame(yref=round2lost[,i],values=round2lost$values)
fig2<-add_trace(fig2,data=dfi,x=~values, y=~yref,name=paste("Lost Strat with belief",beliefs[i-1,]), type = 'scatter', mode = 'lines')
}
}
fig2<-add_trace(fig2,data=dfi,x=~values, y=~efficiency*(1+values/2),name=paste("Prediction"), type = 'scatter', mode = 'lines',
line = list(color = 'rgb(205, 12, 24)', width = 5))
fig2<-plot_ly(round2lost,x=~values, y=~V1,name=paste("Lost Strat with belief",beliefs[1,]), type = 'scatter', mode = 'lines')
if(ncol(round2lost)>2){
for(i in 3:ncol(round2lost)){
dfi<-data.frame(yref=round2lost[,i],values=round2lost$values)
fig2<-add_trace(fig2,data=dfi,x=~values, y=~yref,name=paste("Lost Strat with belief",beliefs[i-1,]), type = 'scatter', mode = 'lines')
}
}
fig2<-add_trace(fig2,data=dfi,x=~values, y=~values,name=paste("Truthful bidding"), type = 'scatter', mode = 'lines',
line = list(color = 'rgb(205, 12, 24)', width = 5))
fig2 <- fig2 %>% layout(title = paste("Lost Strategies in 2nd round DutchFPSB with n=3 & efficiency of", efficiency),
xaxis = list(title = "Cost Type for Sole source award"),
yaxis = list (title = "2nd round Bids"))
fig2<-plot_ly(round2lost,x=~values, y=~V1,name=paste("Lost Strat with belief",beliefs[1,]), type = 'scatter', mode = 'lines')
if(ncol(round2lost)>2){
for(i in 3:ncol(round2lost)){
dfi<-data.frame(yref=round2lost[,i],values=round2lost$values)
fig2<-add_trace(fig2,data=dfi,x=~values, y=~yref,name=paste("Lost Strat with belief",beliefs[i-1,]), type = 'scatter', mode = 'lines')
}
}
fig2<-add_trace(fig2,data=dfi,x=~values, y=~values*efficiency,name=paste("Truthful bidding"), type = 'scatter', mode = 'lines',
line = list(color = 'rgb(205, 12, 24)', width = 5))
fig2 <- fig2 %>% layout(title = paste("Lost Strategies in 2nd round DutchFPSB with n=3 & efficiency of", efficiency),
xaxis = list(title = "Cost Type for Sole source award"),
yaxis = list (title = "2nd round Bids"))
fig2
fig3<-plot_ly(round2won,x=~values, y=~V1,name=paste("Won Strat with belief",beliefs[1,]), type = 'scatter', mode = 'lines')
if(ncol(round2lost)>2){
for(i in 3:ncol(round2won)){
dfi<-data.frame(yref=round2won[,i],values=round2won$values)
fig3<-add_trace(fig3,data=dfi,x=~values, y=~yref,name=paste("Won Strat with belief",beliefs[i-1,]), type = 'scatter', mode = 'lines')
}
}
fig3<-add_trace(fig3,data=dfi,x=~values, y=~values*(1-efficiency),name=paste("Truthful bidding"), type = 'scatter', mode = 'lines',
line = list(color = 'rgb(205, 12, 24)', width = 5))
fig3 <- fig3 %>% layout(title = paste("Won Strategies in 2nd round DutchFPSB with n=3 & efficiency of", efficiency),
xaxis = list(title = "Cost Type for Sole source award"),
yaxis = list (title = "2nd round Bids"))
fig3
fig1 <- fig1 %>% add_trace(data,x=~values2,y = ~split*2, frame~it2, name = '2 x 1st Round Split', line = list(color = 'rgb(92, 100, 67)',width = 4))
fig1 <- fig1 %>% add_trace(data,x=~values2,y = ~values2*efficiency, frame~it2, name = 'True value for split', line = list(color = 'rgb(80, 20, 167)',width = 4))
fig1 <- fig1 %>% layout(title = paste("Strategies in 1st round DutchFPSB with n=3, with efficiency <br> of", efficiency, ", epsilon = ", epsilon , "<br> found after ", nIter, " iterations and", time/1000, " seconds"),
xaxis = list(title = "Cost Type for Sole source award"),
yaxis = list (title = "1st round Bids",range=c(0,3)))
fig1
source('C:/Users/Vinzenz/eclipse-workspace/OutputDutchFPSB3/DutchFPSB3Prediction.R', echo=TRUE)
1.8*0.7
1.88*0.7
source('C:/Users/Vinzenz/eclipse-workspace/OutputDutchFPSB3/DutchFPSB3Prediction.R', echo=TRUE)
